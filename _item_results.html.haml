- content_for :head_js do
  :javascript
    $(function () {

//<<<<<<<<<<< Functions for EventSelect >>>>>>>>>>>>>>>>>>>/////


      function addListeners(node){
        node.addEventListener('click', selectEvent);
        if(node.querySelector('.edit-btn')){
            node.querySelector('.edit-btn').addEventListener('click', editEvent);
            node.querySelector('.check-btn').addEventListener('click', updateEvent);
            node.querySelector('.delete-btn').addEventListener('click', deleteEvent);
        }
        if(node.querySelector('input')){
            const currInput = node.querySelector('input');
            const data = node.querySelector('input').value;
            node.querySelector('input').addEventListener('blur', () => {returnPreviousVal(currInput, data)});
            node.querySelector('input').addEventListener('blur', ()=>{updateEvent.call(currInput)});
        }
    }
    
    function returnPreviousVal(currInput, data){
        let filteredData = data.split(' ').slice(1).join(' ');
        console.log(currInput.value);
        if(currInput.value.length == 0){
            console.log(filteredData);
        currInput.value = filteredData;
        }
    }
    
    function changeIndex(node){
        if(!node.tagName) return;
        const index = +node.getAttribute('data-index');
        const options = document.querySelectorAll('.custom-select .custom-option');
        for(let option of options){
            if(+option.getAttribute('data-index') < index) continue;
            const data = option.querySelector('input').value.split(' ').slice(1).join(' ');
            const currIndex = option.getAttribute('data-index');
            option.querySelector('input').value = `${+currIndex-1}. ${data}`;
            option.setAttribute('data-index', +currIndex-1);
        }
    }
    
    function deleteEvent(){
       const prevNode =  this.closest('.custom-option').previousElementSibling;
       const nextNode = this.closest('.custom-option').nextElementSibling;
       const isSelected = this.closest('.custom-option').classList.contains('selected');
       this.closest('.custom-option').remove();
       if(isSelected) selectEvent.call(prevNode);
       if(nextNode) changeIndex(nextNode);
    }
    
    function updateEvent(){
        const data = this.closest('.custom-option').querySelector('input').value;
        const index = this.closest('.custom-option').getAttribute('data-index');
        this.closest('.custom-option').querySelector('input').value = `${index}. ${data}`;
        this.closest('.custom-option').querySelector('input').disabled = true;
        this.closest('.custom-option').querySelector('.check-btn').style.display = 'none';
        this.closest('.custom-option').querySelector('.edit-btn').style.display = 'block';
        if(this.closest('.custom-option.selected')){
            this.closest('.custom-select').querySelector('.custom-select__trigger span').textContent = this.closest('.custom-option').querySelector('input').value
        }
    }
    
    function selectEvent(){
        if (!this.classList.contains('selected') && this.parentNode) {
            if(this.parentNode.querySelector('.custom-option.selected')){
                this.parentNode.querySelector('.custom-option.selected').classList.remove('selected');
            }
            
            this.classList.add('selected');
            this.closest('.custom-select').querySelector('.custom-select__trigger span').textContent = this.querySelector('input').value;
        }
    };
    
    function editEvent(){
        unadleInput.call(this.closest('.custom-option'));
        this.closest('.custom-option').querySelector('.edit-btn').style.display = 'none';
    }
    
    function unadleInput(e){
        if(e && e.target.classList.contains('select-btn')) return;
        this.querySelector('input').disabled = false;
        this.querySelector('input').value = '';
        this.querySelector('input').focus();
        this.querySelector('.select-btn').style.display = 'block';
    }
    
    function createNewEvent(data){
        const newEvent = document.createElement('span');
        let lastIndex = document.querySelector('.custom-select .custom-option:last-child') 
        ? document.querySelector('.custom-select .custom-option:last-child').getAttribute('data-index')
        : 0;
        const newInput = document.createElement('input');
        const newBtnRow = document.createElement('div');
        newEvent.className = 'custom-option';
        newEvent.setAttribute('data-index', +lastIndex+1);
        newEvent.setAttribute('data-value', 5);
        newInput.value = `${+lastIndex+1}. ${data}`;
        newInput.disabled = true;
        newBtnRow.className = 'btn-row';
        newBtnRow.innerHTML = '\
        <img class="select-btn check-btn" src="/check.png" alt="">\
        <img class="select-btn edit-btn" src="/edit.png" alt="">\
        <img class="select-btn delete-btn" src="/delete.png" alt="">';
        newEvent.append(newInput);
        newEvent.append(newBtnRow);
        document.querySelector('.custom-options').append(newEvent);
        addListeners(newEvent);
    }
    
 


 //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>


        function bindEdit (link) {
            var $link = $(link);
            $link.click(function (event) {
                event.preventDefault();
                $.get(link.href, function (data) {
                    var wrapper = $("<div>").hide();
                    $("body").append(wrapper);
                    wrapper.html(data);
                    wrapper.disarm({
                        success: function (data, textStatus) {
                            var tr = $link.parents("tr.item");
                            var item_id = tr.attr("data-id")
                            $.get("/item_search/table_row?item_id=" + item_id, function (data, textStatus) {
                                wrapper.dialog("close");
                                var new_tr = $(data);
                                new_tr.find("a.edit").each(function () { bindEdit(this); });
                                tr.replaceWith(new_tr);
                                $("#item_" + item_id).hide().fadeIn(1000);
                            });
                        }
                    });
                    wrapper.dialog({
                        modal: true,
                        width: 980,
                        close: wrapper.dialog("destroy")
                    })
                });
            });
        }

        var dbl_time_marker = null;
        function set_customer(event) {
          var $el     = $(event.toElement),
            $parent   = $el.closest('tr'),
            id        = $parent.attr('data-customer-id'),
            $id_el    = $("#item_search_customer_id"),
            $name_el  = $("#item_search_customer_name"),
            time_now  = Date.now(),
            dbl_click = false;
          if(dbl_time_marker && time_now - dbl_time_marker < 555)
            dbl_click = true;

          if(id !== $id_el.val() || dbl_click) {
            $name_el.val($el.text());
            $id_el.val(id);
            if(dbl_click)
              $("#item_search_submit").click();
          }
          else {
            $name_el.val("");
            $id_el.val("");
          }
          dbl_time_marker = time_now;
        }

        function set_category(event) {
          var $el     = $(event.toElement),
            $parent   = $el.closest('tr'),
            id        = $parent.attr('data-category-id'),
            $id_el    = $("#item_search_item_category_id"),
            time_now  = Date.now(),
            dbl_click = false;
          if(dbl_time_marker && time_now - dbl_time_marker < 555)
            dbl_click = true;

          if(id !== $id_el.val() || dbl_click) {
            $id_el.val(id);
            if(dbl_click)
              $("#item_search_submit").click();
          }
          else {
            $id_el.val("");
          }
          dbl_time_marker = time_now;
        }

        function set_min(event) {
          var $el     = $(event.toElement),
            $val_el   = $("#item_search_price_estimate_from"),
            val       = $el.text().replace('.', ''),
            time_now  = Date.now(),
            dbl_click = false;
          if(dbl_time_marker && time_now - dbl_time_marker < 555)
            dbl_click = true;

          if(val !== $val_el.val() || dbl_click) {
            $val_el.val(val);
            if(dbl_click)
              $("#item_search_submit").click();
          }
          else {
            $val_el.val("");
          }
          dbl_time_marker = time_now;
        }


        function set_event(event) {
          $el = $(event.target);
          console.log(event.target.value);
          id  = $el.closest("tr").attr("data-id")
          $.ajax({
              url: "/items/" + id,
              type: 'put',
              data: {"item[event_id]": event.target.value},
              success: function () {
                $el.addClass('result_success').removeClass('result_error');
              },
              error: function (e) {
                console.log(e);
                $el.addClass('result_error').removeClass('result_success');
                alert('error when set event');
              }
          });
        }

        //var edit_event_timer = null;
        //function show_edit_event() {
         // console.log('fadF');
         // clearTimeout(edit_event_timer);
        //  $("#event_form").fadeIn()
        //};
        //function hide_edit_event() {
         // console.log('fadFsdff');
       //  // edit_event_timer = setTimeout( function(){ $("#event_form").fadeOut() }, 2000);
       // }
        function submit_event_save(event) {
          var $el_name = $('#add-event input'),
              //select = document.getElementById('event_edit'),
              index  = select.selectedIndex,
              id     = select.value,
              name   = $el_name.val(),
              url    = "/item_events" + ( index === 0 ? "" : "/" + id ),
              method = index === 0 ? 'post' : 'put';

          event.preventDefault();
          if(!name || name.length < 1) return;

          $.ajax({
              url:      url,
              type:     method,
              data:   {"item_event[name]": name},
              success:  function () {
                $el_name.addClass('result_success').removeClass('result_error');
                document.location.reload(true);
              },
              error:    function (e) {
                console.log(e);
                $el_name.addClass('result_error').removeClass('result_success');
                alert('error when set event');
              }
          });
        }

        // function change_edit_type_event(event) {
        //   console.log(event);
        //   var el    = event.target,
        //       index = el.selectedIndex,
        //       text  = el.options[index].text.replace(/^\d*\../,''),
        //       id    = el.value,
        //       $el   = $(event.target),
        //       $input  = $('input#event_new_name'),
        //       $buttonS = $('button#event_new_save'),
        //       $buttonD = $('button#event_remove');

        //   console.log(el.selectedIndex, text, id );
        //   if (index === 0) {
        //     console.log('add');
        //     $input.attr('placeholder', 'add new event').attr('title', 'add new event').val('');
        //     $buttonS.attr('title', 'add').text('Add');
        //     $buttonD.hide();
        //   }
        //   else if (index === 1){
        //     $input.attr('placeholder', 'not possible').attr('title', 'error').val('');
        //     $buttonS.attr('title', 'not').text('Not!');
        //     $buttonD.hide();
        //     console.log('error 1');
        //   }
        //   else {
        //     $input.attr('placeholder', 'edit / remove').attr('title', 'edit / remove').val(text);
        //     $buttonS.attr('title', 'save').text('Save');
        //     $buttonD.show();
        //     console.log('delete|rename');
        //   }
        // }

        // function on_enter_save(event) {
        //   console.log(event);
        //   if (event.keyCode === 13) {
        //     event.preventDefault();
        //     $("#event_new_save").click();
        //     return false;
        //   }
        // }

        function submit_event_delete(currOption, event) {
          //event.preventDefault();
          var $select = currOption,
            id = $select.val();
          if (id < 2)
            return false;

          $.ajax({
              url:   "/item_events/" + id,
              type:   'delete',

              success: function () {
                $select.addClass('result_success').removeClass('result_error');
                document.location.reload(true);
              },
              error:   function (e) {
                console.log(e);
                $el_name.addClass('result_error').removeClass('result_success');
                alert('error when set event');
              }
          });
          return false;
        }


        document.querySelector('.custom-select-wrapper').addEventListener('click', function(e){
          if(e.target.closest('.add-event')){
              return;
          }else if(e.target.closest('.btn-row')){
              return;
          }else if(e.target.tagName == 'INPUT' && e.target.disabled == false) return;
          this.querySelector('.custom-select').classList.toggle('open');
          this.querySelector('.add-event input').value = 'Add new Event';
          this.querySelector('.add-event input').disabled = true;
          this.querySelector('.select-btn').style.display = 'none';
        })
        for (const option of document.querySelectorAll(".custom-option")) {
        addListeners(option);
        };
    
        window.addEventListener('click', function(e) {
            const select = document.querySelector('.custom-select');
            if(e.target.closest('.add-event')){
                return;
            }else if(e.target.closest('.btn-row')){
                return;
            }else if(e.target.tagName == 'INPUT' && e.target.disabled == false) return;
            if (!select.contains(e.target)) {
                select.classList.remove('open');
            }
        });
    
        document.querySelector('.custom-select .add-event').addEventListener('click', unadleInput);
        
        document.querySelector('.custom-select .add-event .select-btn').addEventListener('click', function(){
          const data = this.closest('.add-event').querySelector('input').value;
          this.closest('.add-event').querySelector('input').disabled = true;
          this.closest('.add-event').querySelector('input').value = 'Add new Event';
          this.style.display = 'none';
          createNewEvent(data);
          
        })
        $('.event select').live("change", set_event);
        $('.customer').live("click", set_customer);
        $('.category').live("click", set_category);
        $('.price_estimate').live("click", set_min);
       // $('select#event_edit').bind('change', change_edit_type_event);
       // $('input#event_new_name').bind('keydown', on_enter_save);
        //$('.bind_focus_blur, .bind_focus_blur *').bind("focus", show_edit_event).bind("blur", hide_edit_event);

        $('#add-event .check-btn').bind("click", submit_event_save)
        $('.custom-option .delete-btn').addEventListener("click", function(){
          const currOption = this.closest('.custom-option').querySelecto('input');
          submit_event_delete(currOption);
        })


        $("table.items a.edit").each(function () {
            bindEdit(this);
        });


        document.getElementById('event_edit').options[1].disabled = true;

    });


.span-10
  %div
    = will_paginate @search.hits
    &nbsp;

.span-2.last.prepend-top
  %h4.quiet{ :style => "text-align: right" }= t('.number_of_matches', :count => @items.total_entries)

%table.enhanced.items.dontlink
  %thead
    %tr
      %th.sticky
      %th.sticky.span-1= Item.human_attribute_name :id
      %th.sticky.span-3= Customer.human_name
      %th.sticky.span-4= Item.human_attribute_name :description
      %th.sticky.span-2= Item.human_attribute_name :item_category_id
      %th.sticky.span-1= t('submissions.show.price_estimate')
      %th.sticky.span-1= Item.human_attribute_name :minimum_price
      %th.sticky.span-1= Item.human_attribute_name :state
      %th.sticky.span-2= Item.human_attribute_name :event_id

  %tbody
    - for item in @items
      %tr[item]{ "data-id" => item.id, "data-customer-id" => item.customer.id, "data-category-id" => item.item_category_id }
        %td
          - if item.main_image
            = link_to image_tag(item.main_image.url(:mini)), item.main_image.url(:web_big), :class => "fancy", :rel => "items"
        %td
          = item.id
          = link_to image_tag('icons/16x16/edit.png', :style => "vertical-align: middle"), edit_item_path(item), :class => "edit"
          - if item.active_catalog_number
            %br/
            = "(#{t('.catalog_number_short')} #{item.active_catalog_number})"
        %td.customer=h item.customer.name
        %td.description= link_to h(item.full_description), item_path(item)
        %td.category=h item.item_category.try(:name_with_position)
        %td.price_estimate= currency_range(item.price_estimate_from, item.price_estimate_to)
        %td.minimum_price= number_to_currency(item.minimum_price)
        %td.state
          = item.human_state
          - if item.sold?
            = " - " + number_to_currency(item.hammer_price)
        -#td.event= item.event.try(:name_with_position)
        %td.event= select_tag "_na", options_from_collection_for_select(ItemEvent.all, :id, :name_with_position, item.event_id), :class => "span-2 event"

        - if (include_links rescue false)
          %td= link_to t("button.show"), item_path(item), :class => "show"
          %td= link_to t("button.delete"), item_path(item), :method => :delete, :confirm => "Are you sure?"


.span-10
  %div
    = will_paginate @search.hits
    &nbsp;

.span-2.last.prepend-top
  %h4.quiet{ :style => "text-align: right" }= t('.number_of_matches', :count => @items.total_entries)
